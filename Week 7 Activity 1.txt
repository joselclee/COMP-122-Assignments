section .data
    name db 'Andre Lee', 10
    namelen equ $-name
    sign db '='
    newline db 10

section .bss
    num1 resb 2
    num2 resb 2
    skip resb 2
    oper resb 1
    answ resb 2
    div1 resb 2
    div2 resb 2

section .text
    global _start

_start:

    ;Read formula input

    mov eax, 3
    mov ebx, 0
    mov ecx, num1
    mov edx, 2
    int 80h

    mov eax, 3
    mov ebx, 0
    mov ecx, oper
    mov edx, 1
    int 80h

    mov eax, 3
    mov ebx, 0
    mov ecx, num2
    mov edx, 2
    int 80h

    mov al, [oper]
    cmp al, '+'
    je addition

    cmp al, '-'
    je subtraction

    cmp al, '*'
    je multiplication

    cmp al, '/'
    je division

    ;Various condition logic:

addition:

    mov al, [num1]
    sub al, '0'
    mov bl, [num2]
    sub bl, '0'

    add al, bl

    add al, '0'
    mov [answ], al
    
    mov al, [num1+1]
    sub al, '0'
    mov bl, [num2+1]
    sub bl, '0'
    
    add al, bl
    
    add al, '0'
    mov [answ+1], al
    
    jmp ansPrint
    
subtraction:

    mov al, [num1]
    sub al, '0'
    mov bl, [num2]
    sub bl, '0'

    sub al,bl

    add al, '0'
    mov [answ], al

    mov al, [num1+1]
    sub al, '0'
    mov bl, [num2+1]
    sub bl, '0'

    sub al, bl

    add al, '0'
    mov [answ+1], al

    jmp ansPrint

multiplication:

    mov al, [num1]
    sub al, '0'
    mov bl, [num2]
    sub bl, '0'
    
    mul bl
    
    add al, '0'
    mov [answ], al
    add ah, '0'
    mov [answ+1], ah
    
    jmp ansPrint
   
zeroPrint:
    
    mov byte [answ], '0'
    mov byte [answ+1], '0'
    jmp ansPrint

division:

    mov al, [num1]
    sub al, '0'
    mov bl, 10
    
    mul bl
    mov [div1], al
    
    mov al, [num1+1]
    sub al, '0'
    mov bl, [div1]
    
    add al, bl
    mov [div1], al
    
    mov al, [num2]
    sub al, '0'
    mov bl, 10
    
    mul bl
    mov [div2], al
    
    mov al, [num2+1]
    sub al, '0'
    mov bl, [div2]
    
    add al, bl
    mov [div2], al
    
    mov al, 0
    mov bl, 0
    
    mov al, [div1]
    mov bl, [div2]
    
    div bl
    
    add ah, '0'
    mov [answ+1], ah
    add al, '0'
    mov [answ], al
      
    jmp ansPrint
    
ansPrint:

    mov eax, 4
    mov ebx, 1
    mov ecx, name
    mov edx, namelen
    int 80h

    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 80h

    mov eax, 4
    mov ebx, 1
    mov ecx, num1
    mov edx, 2
    int 80h
    
    mov eax, 4
    mov ebx, 1
    mov ecx, oper
    mov edx, 1
    int 80h
    
    mov eax, 4
    mov ebx, 1
    mov ecx, num2
    mov edx, 2
    int 80h
    
    mov eax, 4
    mov ebx, 1
    mov ecx, sign
    mov edx, 1
    int 80h
    
    mov eax, 4
    mov ebx, 1
    mov ecx, answ
    mov edx, 1
    int 80h
    
    mov eax, 4
    mov ebx, 1
    mov ecx, answ+1
    mov edx, 1
    int 80h

    mov eax, 1
    mov ebx, 0
    int 80h